services:
  client:
    build: 
      context: ./client
      dockerfile: Dockerfile
    container_name: task-management-client
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
    command: npm run dev
    develop:
      watch:
        - action: sync
          path: ./client
          target: /app
          ignore:
            - node_modules/
        - action: rebuild
          path:  package.json
    
  server:
    build: 
      context: ./server
      dockerfile: Dockerfile
    container_name: task-management-server
    ports:
      - "8000:8000"
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    networks:
      - task-management-network
    develop:
      watch:
        - action: sync
          path: ./server
          target: /app
          ignore:
            - __pycache__/
            - .pytest_cache/
            - .mypy_cache/
        - action: rebuild
          path: ./server/requirements.txt
  

  db:
    image: postgres:15
    container_name: task-management-db
    restart: always
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=taskmanagement
      - POSTGRES_HOST_AUTH_METHOD=trust
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - task-management-network

networks:
  task-management-network:
    driver: bridge

volumes:
  postgres_data: